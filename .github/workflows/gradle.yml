# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

run-name: ${{github.actor}} is experimenting with github action
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: test-and-build
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:16-alpine
        ports:
          - 5432:5432
        # Provide the password for postgres
#        env:
#          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    
    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Run Unit Tests
      run: ./gradlew test
    - name: Run Integration Tests
      run: ./gradlew integrationTest
    - name: Build with Gradle Wrapper, skip the test and only assemble the jar
      run: ./gradlew build -x test -x integrationTest
    - name: list current directory content
      run: ls -la
    # GitHub action jobs do not share their own workspace and the content, we can output some job values for subsequent jobs
    # but this time we need the artifact for the subsequent jobs, so we use upload-artifact and download-artifact action
    - name: upload the built jar
      id: upload-built-jar
      uses: actions/upload-artifact@v4
      with:
        path: build/libs/HATEOASTest-0.0.1-SNAPSHOT.jar
        if-no-files-found: error
        retention-days: 5
        overwrite: true
    - name: output the artifact ID
      run: echo 'Artifact ID is ${{ steps.upload-built-jar.outputs.artifact-id }}'

  docker-build:
    name: docker-build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write
    needs: build

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: download the built jar from previous job, not repeat the build here again
      id: download-built-jar
      uses: actions/download-artifact@v4
      
    - name: output the download-path
      run: echo 'Artifact is downloaded to ${{ steps.download-built-jar.outputs.download-path }}'
    - name: extract the JAR contents with layer information
     #for more info, refer to https://spring.io/guides/topicals/spring-boot-docker
      run: java -Djarmode=layertools -jar artifact/*.jar extract --destination artifact/extracted
    - name: list current filesystem content
      run: ls -Rl

    # - name: Login to Docker Hub
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}
    # - name: docker build and push image to dockerhub
    #   run: |
    #     docker build -t littglejack/cicdlearn:1.0.0-beta .
    #     docker push littglejack/cicdlearn:1.0.0-beta

   #  comment the command below cuz now we try to build docker image from extracted jar files instead of single jar
   #      docker build --build-arg JAR_FILE=artifact/*.jar -t littglejack/cicdlearn:1.0.0-beta .

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        audience: sts.amazonaws.com
        aws-region: us-east-1
        role-to-assume: arn:aws:iam::339713148173:role/GithubActTester
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: githubtest
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG    


#    - name: Docker build using spring boot gradle plugins, not even need to write myself the Dockerfile
#      I don't see how useful of this function, in reality we still write ourself Dockerfile for customisation
#      run: ./gradlew bootBuildImage --imageName=test/myapp

    # - name: Publish to GitHub Packages
    #   run: ./gradlew publish
    #   env:
    #     USERNAME: ${{ github.actor }}
    #     TOKEN: ${{ secrets.GITHUB_TOKEN }}
  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
